/**
 * Simple Inventory API
 * This is a simple API
 *
 * OpenAPI spec version: 1.2.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Fixture } from '../model/fixture';
import { Player } from '../model/player';
import { PredictedGame } from '../model/predictedGame';
import { Team } from '../model/team';
import { TeamStanding } from '../model/teamStanding';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ClientService {

    protected basePath = 'https://virtserver.swaggerhub.com/mabaums/Personal_Website/1.2.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get basic info about a fixture
     * 
     * @param fixture_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFixture(fixture_id?: number, observe?: 'body', reportProgress?: boolean): Observable<Fixture>;
    public getFixture(fixture_id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Fixture>>;
    public getFixture(fixture_id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Fixture>>;
    public getFixture(fixture_id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fixture_id !== undefined && fixture_id !== null) {
            queryParameters = queryParameters.set('fixture_id', <any>fixture_id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Fixture>('get',`${this.basePath}/fixture`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get basic info about a player
     * 
     * @param player_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPlayer(player_id?: number, observe?: 'body', reportProgress?: boolean): Observable<Player>;
    public getPlayer(player_id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Player>>;
    public getPlayer(player_id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Player>>;
    public getPlayer(player_id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (player_id !== undefined && player_id !== null) {
            queryParameters = queryParameters.set('player_id', <any>player_id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Player>('get',`${this.basePath}/player`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get list of players from a team
     * 
     * @param team_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSquad(team_id?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Player>>;
    public getSquad(team_id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Player>>>;
    public getSquad(team_id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Player>>>;
    public getSquad(team_id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (team_id !== undefined && team_id !== null) {
            queryParameters = queryParameters.set('team_id', <any>team_id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Player>>('get',`${this.basePath}/squad`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get standings from the selected league
     * 
     * @param league_id 
     * @param season 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStanding(league_id?: number, season?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TeamStanding>>;
    public getStanding(league_id?: number, season?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TeamStanding>>>;
    public getStanding(league_id?: number, season?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TeamStanding>>>;
    public getStanding(league_id?: number, season?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (league_id !== undefined && league_id !== null) {
            queryParameters = queryParameters.set('leagueID', <any>league_id);
        }
        if (season !== undefined && season !== null) {
            queryParameters = queryParameters.set('season', <any>season);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TeamStanding>>('get',`${this.basePath}/standings`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get team of specified id
     * 
     * @param team_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeam(team_id?: number, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public getTeam(team_id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public getTeam(team_id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public getTeam(team_id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (team_id !== undefined && team_id !== null) {
            queryParameters = queryParameters.set('teamID', <any>team_id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Team>('get',`${this.basePath}/team`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Predict the outcome of two teams playing
     * 
     * @param home_id 
     * @param away_id 
     * @param algo_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public predictGame(home_id?: number, away_id?: number, algo_id?: number, observe?: 'body', reportProgress?: boolean): Observable<PredictedGame>;
    public predictGame(home_id?: number, away_id?: number, algo_id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PredictedGame>>;
    public predictGame(home_id?: number, away_id?: number, algo_id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PredictedGame>>;
    public predictGame(home_id?: number, away_id?: number, algo_id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (home_id !== undefined && home_id !== null) {
            queryParameters = queryParameters.set('homeID', <any>home_id);
        }
        if (away_id !== undefined && away_id !== null) {
            queryParameters = queryParameters.set('awayID', <any>away_id);
        }
        if (algo_id !== undefined && algo_id !== null) {
            queryParameters = queryParameters.set('algoID', <any>algo_id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PredictedGame>('get',`${this.basePath}/predictGame`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Predict a certain round based on the previous weeks.
     * 
     * @param round_number 
     * @param algo_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public predictRound(round_number?: number, algo_id?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<PredictedGame>>;
    public predictRound(round_number?: number, algo_id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PredictedGame>>>;
    public predictRound(round_number?: number, algo_id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PredictedGame>>>;
    public predictRound(round_number?: number, algo_id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (round_number !== undefined && round_number !== null) {
            queryParameters = queryParameters.set('roundNumber', <any>round_number);
        }
        if (algo_id !== undefined && algo_id !== null) {
            queryParameters = queryParameters.set('algoID', <any>algo_id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<PredictedGame>>('get',`${this.basePath}/predictRound`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
