/**
 * Simple Inventory API
 * This is a simple API
 *
 * OpenAPI spec version: 1.2.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PredictedGame } from '../model/predictedGame';
import { Team } from '../model/team';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ClientService {

    protected basePath = 'https://virtserver.swaggerhub.com/mabaums/Personal_Website/1.2.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get standings from the selected league
     * 
     * @param leagueID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStanding(leagueID?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public getStanding(leagueID?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public getStanding(leagueID?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public getStanding(leagueID?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (leagueID !== undefined && leagueID !== null) {
            queryParameters = queryParameters.set('leagueID', <any>leagueID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Team>>('get',`${this.basePath}/standings`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get team of specified id
     * 
     * @param teamID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeam(teamID?: number, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public getTeam(teamID?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public getTeam(teamID?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public getTeam(teamID?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (teamID !== undefined && teamID !== null) {
            queryParameters = queryParameters.set('teamID', <any>teamID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Team>('get',`${this.basePath}/team`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Predict the outcome of two teams playing
     * 
     * @param homeID 
     * @param awayID 
     * @param algoID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public predictGame(homeID?: number, awayID?: number, algoID?: number, observe?: 'body', reportProgress?: boolean): Observable<PredictedGame>;
    public predictGame(homeID?: number, awayID?: number, algoID?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PredictedGame>>;
    public predictGame(homeID?: number, awayID?: number, algoID?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PredictedGame>>;
    public predictGame(homeID?: number, awayID?: number, algoID?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (homeID !== undefined && homeID !== null) {
            queryParameters = queryParameters.set('homeID', <any>homeID);
        }
        if (awayID !== undefined && awayID !== null) {
            queryParameters = queryParameters.set('awayID', <any>awayID);
        }
        if (algoID !== undefined && algoID !== null) {
            queryParameters = queryParameters.set('algoID', <any>algoID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PredictedGame>('get',`${this.basePath}/predictGame`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Predict a certain round based on the previous weeks.
     * 
     * @param roundNumber 
     * @param algoID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public predictRound(roundNumber?: number, algoID?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<PredictedGame>>;
    public predictRound(roundNumber?: number, algoID?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PredictedGame>>>;
    public predictRound(roundNumber?: number, algoID?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PredictedGame>>>;
    public predictRound(roundNumber?: number, algoID?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (roundNumber !== undefined && roundNumber !== null) {
            queryParameters = queryParameters.set('roundNumber', <any>roundNumber);
        }
        if (algoID !== undefined && algoID !== null) {
            queryParameters = queryParameters.set('algoID', <any>algoID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<PredictedGame>>('get',`${this.basePath}/predictRound`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
