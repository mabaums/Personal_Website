# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Game(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, goals_home: int=None, goals_away: int=None, name_home: str=None, name_away: str=None):  # noqa: E501
        """Game - a model defined in Swagger

        :param goals_home: The goals_home of this Game.  # noqa: E501
        :type goals_home: int
        :param goals_away: The goals_away of this Game.  # noqa: E501
        :type goals_away: int
        :param name_home: The name_home of this Game.  # noqa: E501
        :type name_home: str
        :param name_away: The name_away of this Game.  # noqa: E501
        :type name_away: str
        """
        self.swagger_types = {
            'goals_home': int,
            'goals_away': int,
            'name_home': str,
            'name_away': str
        }

        self.attribute_map = {
            'goals_home': 'goals_home',
            'goals_away': 'goals_away',
            'name_home': 'name_home',
            'name_away': 'name_away'
        }
        self._goals_home = goals_home
        self._goals_away = goals_away
        self._name_home = name_home
        self._name_away = name_away

    @classmethod
    def from_dict(cls, dikt) -> 'Game':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Game of this Game.  # noqa: E501
        :rtype: Game
        """
        return util.deserialize_model(dikt, cls)

    @property
    def goals_home(self) -> int:
        """Gets the goals_home of this Game.


        :return: The goals_home of this Game.
        :rtype: int
        """
        return self._goals_home

    @goals_home.setter
    def goals_home(self, goals_home: int):
        """Sets the goals_home of this Game.


        :param goals_home: The goals_home of this Game.
        :type goals_home: int
        """
        if goals_home is None:
            raise ValueError("Invalid value for `goals_home`, must not be `None`")  # noqa: E501

        self._goals_home = goals_home

    @property
    def goals_away(self) -> int:
        """Gets the goals_away of this Game.


        :return: The goals_away of this Game.
        :rtype: int
        """
        return self._goals_away

    @goals_away.setter
    def goals_away(self, goals_away: int):
        """Sets the goals_away of this Game.


        :param goals_away: The goals_away of this Game.
        :type goals_away: int
        """
        if goals_away is None:
            raise ValueError("Invalid value for `goals_away`, must not be `None`")  # noqa: E501

        self._goals_away = goals_away

    @property
    def name_home(self) -> str:
        """Gets the name_home of this Game.


        :return: The name_home of this Game.
        :rtype: str
        """
        return self._name_home

    @name_home.setter
    def name_home(self, name_home: str):
        """Sets the name_home of this Game.


        :param name_home: The name_home of this Game.
        :type name_home: str
        """
        if name_home is None:
            raise ValueError("Invalid value for `name_home`, must not be `None`")  # noqa: E501

        self._name_home = name_home

    @property
    def name_away(self) -> str:
        """Gets the name_away of this Game.


        :return: The name_away of this Game.
        :rtype: str
        """
        return self._name_away

    @name_away.setter
    def name_away(self, name_away: str):
        """Sets the name_away of this Game.


        :param name_away: The name_away of this Game.
        :type name_away: str
        """
        if name_away is None:
            raise ValueError("Invalid value for `name_away`, must not be `None`")  # noqa: E501

        self._name_away = name_away
